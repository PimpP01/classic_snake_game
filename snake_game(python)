from tkinter import*
import random

# wn = window

GAME_WIDTH = 700  # variables that behave like constants(values that don't need to be changed)
GAME_HEIGHT = 700
SPEED = 100
SPACE_SIZE = 20
BODY_PARTS = 1
SNAKE_COLOR = "yellow"
FOOD_COLOR = "purple"
BACKGROUND_COLOR = "black"


class Snake:
    def __init__(self):
        """Create size, coordinates, list of square graphics for a snake"""
        self.body_size = BODY_PARTS
        self.coordinates = []
        self.squares = []

        for i in range(0, BODY_PARTS):  # list of coordinates
            self.coordinates.append([0, 0])  # adds new list in coordinates, snake will appear in top left corner

        for x, y in self.coordinates:  # list of lists, reason why we are using x, y
            square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR, tag="snake")
            self.squares.append(square)


class Food:
    def __init__(self):
        """Construct food object that will be placed randomly"""
        x = random.randint(0, (GAME_WIDTH/SPACE_SIZE)-1) * SPACE_SIZE  # randomizes location of where snake will spawn
        y = random.randint(0, (GAME_HEIGHT/SPACE_SIZE)-1) * SPACE_SIZE

        self.coordinates = [x, y]

        canvas.create_oval(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=FOOD_COLOR, tag="food")



def next_turn(snake, food):
    """Define next turn coordinates for snake using coordinates
    squaring head of the snake with coordinates & updates snake's list of squares with index
    update snake's body whenever in contact with food
    deletes food picked up by snake"""

    x, y = snake.coordinates[0]  # head of the snake

    if direction == "up":
        y -= SPACE_SIZE  # move one space up
    elif direction == "down":
        y += SPACE_SIZE  # move one space down
    elif direction == "left":
        x -= SPACE_SIZE  # move one space left
    elif direction == "right":
        x += SPACE_SIZE  # move one space right

    snake.coordinates.insert(0, (x, y))  # coordinates for head of the snake, 0 will be the index

    square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR)  # new graphic for head of the snake

    snake.squares.insert(0, square)  # update snake's list of squares, with index of 0

    if x == food.coordinates[0] and y == food.coordinates[1]:  # if x coordinate for head of snake is = to food object's coordinates at index of 0 (x coordinate for food object) and y = food coordinates at index of 1 (overlapping

        global score

        score += 1  # increment by 1 if food & snake head overlap

        label.config(text="Score: {}".format(score))  # config = updates new score & formats text to update as well

        canvas.delete("food")

        food = Food()

    else:   # deletes last body part of the snake with negative index of 1 (last coordinates)
        del snake.coordinates[-1]

        canvas.delete(snake.squares[-1])

        del snake.squares[-1]

    if check_collisions(snake):
        game_over()

    else:
        wn.after(SPEED, next_turn, snake, food)  # next turn function. time, call next turn function with arguments of snake & food. no need to actually call next turn function, just needs to be in parentheses


def change_direction(new_direction):
    """Construct the changing of movement for snake"""
    global direction  # old direction

    if new_direction == 'left':
        if direction != 'right':  # used to make sure we don't go backwards & do 180-degree turn
            direction = new_direction

    if new_direction == 'right':  # else if new direction is right & our direction is not already left.
        if direction != 'left':  # if direction is not left
            direction = new_direction

    elif new_direction == 'up':  # new direction up if old direction not down
        if direction != 'down':  # if direction is not down
            direction = new_direction

    if new_direction == 'down':
        if direction != 'up':
            direction = new_direction


def check_collisions(snake):
    x, y = snake.coordinates[0]

    if x < 0 or x >= GAME_WIDTH:
        print("GAME OVER...")
        return True
    elif y < 0 or y >= GAME_HEIGHT:
        print("GAME OVER...")
        return True

    for body_part in snake.coordinates[1:]:  # end game if body part of snake's coordinates touch each other. [1:]set to everything after head of the snake
        if x == body_part[0] and y == body_part[1]:  # if x == body part [index of 0, starting or head of snake, & y's body part with index of 1, end game
            print("GAME OVER...")
            return True

    return False  # return false, there are no collisions


def game_over():

    canvas.delete(ALL)
    canvas.create_text(canvas.winfo_width()/2, canvas.winfo_height()/2,  # text that opens up in middle of the canvas/screen
                       font=('Times New Roman', 70), text="GAME OVER...", fill="red", tag="gameover")


wn = Tk()
wn.title("Passion P's Snake Game")
wn.resizable(False, False)  # doesn't allow resize option of window screen

score = 0
direction = 'down'  # initial direction


label = Label(wn, text="Score: {}".format(score), font=('Times New Roman', 32, "normal"))  # score label, adding label to our window, setting text to "Score", formatted & font for the text
label.pack()

canvas = Canvas(wn, bg=BACKGROUND_COLOR, height=GAME_HEIGHT, width=GAME_WIDTH)  # canvas = rectangular area intended for widgets, drawing pictures, complex layouts, graphics, text, frames, etc
canvas.pack()  # instead of declaring precise location of a widget, pack() method declares the position of widgets in relation to each other. organizes widgets in horizontal & vertical boxes that are limited to left, right, top, bottom positions. each box is offset & relative to each other

wn.update()

wn_width = wn.winfo_width()  # window dimensions
wn_height = wn.winfo_height()
screen_width = wn.winfo_screenwidth()
screen_height = wn.winfo_screenheight()

x = int((screen_width/2) - (wn_width/2))  # int() = cast
y = int((screen_height/2.2) - (wn_height/2))  # screen height divided by 2.2 (2 will make bottom portion of window to overlap bottom of screen

wn.wm_geometry(f"{wn_width}x{wn_height}+{x}+{y}")  # when passing x & y, cannot be floats

wn.bind('<Left>', lambda event: change_direction('left'))  # controls for the snake, binding keys
wn.bind('<Right>', lambda event: change_direction('right'))
wn.bind('<Up>', lambda event: change_direction('up'))
wn.bind('<Down>', lambda event: change_direction('down'))  # lambda event = pass in control of down


snake = Snake()
food = Food()

next_turn(snake, food)

wn.mainloop()
